package suanfaclass.suixianglu.dp;

import java.util.Arrays;

/**
 * 给你一个整数数组 prices 和一个整数 k ，其中 prices[i] 是某支给定的股票在第 i 天的价格。
 * 设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。也就是说，你最多可以买 k 次，卖 k 次。
 * 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
 */
public class num188 {
    public static void main(String[] args) {
        int[] prices = {};
        System.out.println(maxProfit(100,prices));
    }
    public static int maxProfit(int k, int[] prices) {
        int len =prices.length;
        int target=k*2+1;
        int[][] dp = new int[len][target];
        for(int i =1;i<target;i+=2){
            dp[0][i]=-prices[0];
        }
        for (int i =1;i<len;i++){
            for(int j=1;j<target;j++){
                if(j%2!=0){
                    dp[i][j]=Math.max(dp[i-1][j],dp[i-1][j-1]-prices[i]);
                }else{
                    dp[i][j]=Math.max(dp[i-1][j],dp[i-1][j-1]+prices[i]);
                }
            }
        }
        return dp[len-1][target-1];
    }
}
